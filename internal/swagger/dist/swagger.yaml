openapi: 3.0.0
info:
  title: VideoAPI
  description: API para la comunicaci√≥n con el backend de video
  version: 0.1.0
servers:
  - url: /
    description: current host
paths:
  /api/login:
    post:
      summary: Logs in and returns the authentication token
      security: []
      tags:
        - Auth
      requestBody:
        required: true
        description: Credentials
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Authentication token
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  role:
                    type: string
                  token:
                    type: string
          headers:
            Set-Cookie:
              description: Authentication cookie
              schema:
                type: string
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
  /api/logout:
    get:
      summary: Removes session cookie
      tags:
        - Auth
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "204":
          description: No data
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
  /api/me:
    get:
      summary: Returns information about the logged-in user
      tags:
        - Auth
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "200":
          description: Authentication token
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  role:
                    type: string
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
  /api/user:
    get:
      summary: Queries a list of User
      tags:
        - User
      description: |-
        All query (q) parameters support several **operators**:

        - `eq`: equals
        - `ne`: not equals
        - `lt`: less than
        - `le`: less or equal
        - `gt`: greater than
        - `ge`: greater or equal
        - `like`: SQL like

        Operators `eq` and `ne` support the special value `NULL` to match
        non-null values in the DB.
      security:
        - bearerAuth: []
        - cookieaAuth: []
      parameters:
        - name: sort
          in: query
          required: false
          description: List of columns to sort by
          schema:
            type: array
            items:
              type: string
        - name: ascending
          in: query
          required: false
          description: Sort ascending
          schema:
            type: boolean
        - name: offset
          in: query
          required: false
          description: Offset for pagination
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          description: Limit for pagination
          schema:
            type: integer
        - name: q:id:eq
          in: query
          required: false
          description: Filter field `id` with the specified operator (`eq`)
          schema:
            type: string
        - name: q:id:ne
          in: query
          required: false
          description: Filter field `id` with the specified operator (`ne`)
          schema:
            type: string
        - name: q:id:like
          in: query
          required: false
          description: Filter field `id` with the specified operator (`like`)
          schema:
            type: string
        - name: q:created_at:lt
          in: query
          required: false
          description: Filter field `created_at` with the specified operator (`lt`)
          schema:
            format: date-time
            type: string
        - name: q:created_at:le
          in: query
          required: false
          description: Filter field `created_at` with the specified operator (`le`)
          schema:
            format: date-time
            type: string
        - name: q:created_at:gt
          in: query
          required: false
          description: Filter field `created_at` with the specified operator (`gt`)
          schema:
            format: date-time
            type: string
        - name: q:created_at:ge
          in: query
          required: false
          description: Filter field `created_at` with the specified operator (`ge`)
          schema:
            format: date-time
            type: string
        - name: q:modified_at:lt
          in: query
          required: false
          description: Filter field `modified_at` with the specified operator (`lt`)
          schema:
            format: date-time
            type: string
        - name: q:modified_at:le
          in: query
          required: false
          description: Filter field `modified_at` with the specified operator (`le`)
          schema:
            format: date-time
            type: string
        - name: q:modified_at:gt
          in: query
          required: false
          description: Filter field `modified_at` with the specified operator (`gt`)
          schema:
            format: date-time
            type: string
        - name: q:modified_at:ge
          in: query
          required: false
          description: Filter field `modified_at` with the specified operator (`ge`)
          schema:
            format: date-time
            type: string
        - name: q:name:eq
          in: query
          required: false
          description: Filter field `name` with the specified operator (`eq`)
          schema:
            type: string
        - name: q:name:ne
          in: query
          required: false
          description: Filter field `name` with the specified operator (`ne`)
          schema:
            type: string
        - name: q:name:like
          in: query
          required: false
          description: Filter field `name` with the specified operator (`like`)
          schema:
            type: string
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "200":
          description: List of items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfUser'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    post:
      summary: Creates a new User
      tags:
        - User
      requestBody:
        description: Information of the User
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "200":
          description: New resource created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceId'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
  /api/user/{id}:
    get:
      summary: Queries a User by id
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "200":
          description: resource content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    put:
      summary: Updates a User by id
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Information of the User
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "204":
          description: no content returned if success
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    delete:
      summary: Deletes a User by id
      tags:
        - User
      security:
        - bearerAuth: []
        - cookieaAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: no content returned if success
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
  /api/video:
    get:
      summary: Queries a list of Video
      tags:
        - Video
      description: |-
        All query (q) parameters support several **operators**:

        - `eq`: equals
        - `ne`: not equals
        - `lt`: less than
        - `le`: less or equal
        - `gt`: greater than
        - `ge`: greater or equal
        - `like`: SQL like

        Operators `eq` and `ne` support the special value `NULL` to match
        non-null values in the DB.
      security:
        - bearerAuth: []
        - cookieaAuth: []
      parameters:
        - name: sort
          in: query
          required: false
          description: List of columns to sort by
          schema:
            type: array
            items:
              type: string
        - name: ascending
          in: query
          required: false
          description: Sort ascending
          schema:
            type: boolean
        - name: offset
          in: query
          required: false
          description: Offset for pagination
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          description: Limit for pagination
          schema:
            type: integer
        - name: q:id:eq
          in: query
          required: false
          description: Filter field `id` with the specified operator (`eq`)
          schema:
            type: string
        - name: q:id:ne
          in: query
          required: false
          description: Filter field `id` with the specified operator (`ne`)
          schema:
            type: string
        - name: q:id:like
          in: query
          required: false
          description: Filter field `id` with the specified operator (`like`)
          schema:
            type: string
        - name: q:created_at:lt
          in: query
          required: false
          description: Filter field `created_at` with the specified operator (`lt`)
          schema:
            format: date-time
            type: string
        - name: q:created_at:le
          in: query
          required: false
          description: Filter field `created_at` with the specified operator (`le`)
          schema:
            format: date-time
            type: string
        - name: q:created_at:gt
          in: query
          required: false
          description: Filter field `created_at` with the specified operator (`gt`)
          schema:
            format: date-time
            type: string
        - name: q:created_at:ge
          in: query
          required: false
          description: Filter field `created_at` with the specified operator (`ge`)
          schema:
            format: date-time
            type: string
        - name: q:modified_at:lt
          in: query
          required: false
          description: Filter field `modified_at` with the specified operator (`lt`)
          schema:
            format: date-time
            type: string
        - name: q:modified_at:le
          in: query
          required: false
          description: Filter field `modified_at` with the specified operator (`le`)
          schema:
            format: date-time
            type: string
        - name: q:modified_at:gt
          in: query
          required: false
          description: Filter field `modified_at` with the specified operator (`gt`)
          schema:
            format: date-time
            type: string
        - name: q:modified_at:ge
          in: query
          required: false
          description: Filter field `modified_at` with the specified operator (`ge`)
          schema:
            format: date-time
            type: string
        - name: q:timestamp:lt
          in: query
          required: false
          description: Filter field `timestamp` with the specified operator (`lt`)
          schema:
            format: date-time
            type: string
        - name: q:timestamp:le
          in: query
          required: false
          description: Filter field `timestamp` with the specified operator (`le`)
          schema:
            format: date-time
            type: string
        - name: q:timestamp:gt
          in: query
          required: false
          description: Filter field `timestamp` with the specified operator (`gt`)
          schema:
            format: date-time
            type: string
        - name: q:timestamp:ge
          in: query
          required: false
          description: Filter field `timestamp` with the specified operator (`ge`)
          schema:
            format: date-time
            type: string
        - name: q:camera:eq
          in: query
          required: false
          description: Filter field `camera` with the specified operator (`eq`)
          schema:
            type: string
        - name: q:camera:ne
          in: query
          required: false
          description: Filter field `camera` with the specified operator (`ne`)
          schema:
            type: string
        - name: q:camera:like
          in: query
          required: false
          description: Filter field `camera` with the specified operator (`like`)
          schema:
            type: string
        - name: q:tags:eq
          in: query
          required: false
          description: Filter field `tags` with the specified operator (`eq`)
          schema:
            type: string
        - name: q:tags:ne
          in: query
          required: false
          description: Filter field `tags` with the specified operator (`ne`)
          schema:
            type: string
        - name: q:tags:like
          in: query
          required: false
          description: Filter field `tags` with the specified operator (`like`)
          schema:
            type: string
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "200":
          description: List of items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfVideo'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    post:
      summary: Creates a new Video
      tags:
        - Video
      requestBody:
        description: Information of the Video
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Video'
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "200":
          description: New resource created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceId'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
  /api/video/{id}:
    get:
      summary: Queries a Video by id
      tags:
        - Video
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "200":
          description: resource content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    put:
      summary: Updates a Video by id
      tags:
        - Video
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Information of the Video
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Video'
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "204":
          description: no content returned if success
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    post:
      summary: Uploads the file for the Video by id
      tags:
        - Video
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: redirectOnSuccess
          in: query
          required: false
          schema:
            type: string
          description: If provided, redirect URL on success
        - name: redirectOnError
          in: query
          required: false
          schema:
            type: string
          description: If provided, redirect URL on error. "error" will be appended to queryString
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
            encoding:
              file:
                contentType: video/4gpp, video/3gpp2, video/3gp2, video/mpeg, video/mp4, video/ogg, video/quicktime, video/webm
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "204":
          description: No data returned
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    delete:
      summary: Deletes a Video by id
      tags:
        - Video
      security:
        - bearerAuth: []
        - cookieaAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: mediaOnly
          in: query
          required: false
          schema:
            type: boolean
          description: If true, only the media will be deleted
      responses:
        "204":
          description: no content returned if success
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
  /api/picture:
    get:
      summary: Queries a list of Picture
      tags:
        - Picture
      description: |-
        All query (q) parameters support several **operators**:

        - `eq`: equals
        - `ne`: not equals
        - `lt`: less than
        - `le`: less or equal
        - `gt`: greater than
        - `ge`: greater or equal
        - `like`: SQL like

        Operators `eq` and `ne` support the special value `NULL` to match
        non-null values in the DB.
      security:
        - bearerAuth: []
        - cookieaAuth: []
      parameters:
        - name: sort
          in: query
          required: false
          description: List of columns to sort by
          schema:
            type: array
            items:
              type: string
        - name: ascending
          in: query
          required: false
          description: Sort ascending
          schema:
            type: boolean
        - name: offset
          in: query
          required: false
          description: Offset for pagination
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          description: Limit for pagination
          schema:
            type: integer
        - name: q:id:eq
          in: query
          required: false
          description: Filter field `id` with the specified operator (`eq`)
          schema:
            type: string
        - name: q:id:ne
          in: query
          required: false
          description: Filter field `id` with the specified operator (`ne`)
          schema:
            type: string
        - name: q:id:like
          in: query
          required: false
          description: Filter field `id` with the specified operator (`like`)
          schema:
            type: string
        - name: q:created_at:lt
          in: query
          required: false
          description: Filter field `created_at` with the specified operator (`lt`)
          schema:
            format: date-time
            type: string
        - name: q:created_at:le
          in: query
          required: false
          description: Filter field `created_at` with the specified operator (`le`)
          schema:
            format: date-time
            type: string
        - name: q:created_at:gt
          in: query
          required: false
          description: Filter field `created_at` with the specified operator (`gt`)
          schema:
            format: date-time
            type: string
        - name: q:created_at:ge
          in: query
          required: false
          description: Filter field `created_at` with the specified operator (`ge`)
          schema:
            format: date-time
            type: string
        - name: q:modified_at:lt
          in: query
          required: false
          description: Filter field `modified_at` with the specified operator (`lt`)
          schema:
            format: date-time
            type: string
        - name: q:modified_at:le
          in: query
          required: false
          description: Filter field `modified_at` with the specified operator (`le`)
          schema:
            format: date-time
            type: string
        - name: q:modified_at:gt
          in: query
          required: false
          description: Filter field `modified_at` with the specified operator (`gt`)
          schema:
            format: date-time
            type: string
        - name: q:modified_at:ge
          in: query
          required: false
          description: Filter field `modified_at` with the specified operator (`ge`)
          schema:
            format: date-time
            type: string
        - name: q:timestamp:lt
          in: query
          required: false
          description: Filter field `timestamp` with the specified operator (`lt`)
          schema:
            format: date-time
            type: string
        - name: q:timestamp:le
          in: query
          required: false
          description: Filter field `timestamp` with the specified operator (`le`)
          schema:
            format: date-time
            type: string
        - name: q:timestamp:gt
          in: query
          required: false
          description: Filter field `timestamp` with the specified operator (`gt`)
          schema:
            format: date-time
            type: string
        - name: q:timestamp:ge
          in: query
          required: false
          description: Filter field `timestamp` with the specified operator (`ge`)
          schema:
            format: date-time
            type: string
        - name: q:camera:eq
          in: query
          required: false
          description: Filter field `camera` with the specified operator (`eq`)
          schema:
            type: string
        - name: q:camera:ne
          in: query
          required: false
          description: Filter field `camera` with the specified operator (`ne`)
          schema:
            type: string
        - name: q:camera:like
          in: query
          required: false
          description: Filter field `camera` with the specified operator (`like`)
          schema:
            type: string
        - name: q:tags:eq
          in: query
          required: false
          description: Filter field `tags` with the specified operator (`eq`)
          schema:
            type: string
        - name: q:tags:ne
          in: query
          required: false
          description: Filter field `tags` with the specified operator (`ne`)
          schema:
            type: string
        - name: q:tags:like
          in: query
          required: false
          description: Filter field `tags` with the specified operator (`like`)
          schema:
            type: string
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "200":
          description: List of items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfPicture'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    post:
      summary: Creates a new Picture
      tags:
        - Picture
      requestBody:
        description: Information of the Picture
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Picture'
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "200":
          description: New resource created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceId'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
  /api/picture/{id}:
    get:
      summary: Queries a Picture by id
      tags:
        - Picture
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "200":
          description: resource content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Picture'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    put:
      summary: Updates a Picture by id
      tags:
        - Picture
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Information of the Picture
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Picture'
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "204":
          description: no content returned if success
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    post:
      summary: Uploads the file for the Picture by id
      tags:
        - Picture
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: redirectOnSuccess
          in: query
          required: false
          schema:
            type: string
          description: If provided, redirect URL on success
        - name: redirectOnError
          in: query
          required: false
          schema:
            type: string
          description: If provided, redirect URL on error. "error" will be appended to queryString
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
            encoding:
              file:
                contentType: image/jpeg, image/png
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "204":
          description: No data returned
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    delete:
      summary: Deletes a Picture by id
      tags:
        - Picture
      security:
        - bearerAuth: []
        - cookieaAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: mediaOnly
          in: query
          required: false
          schema:
            type: boolean
          description: If true, only the media will be deleted
      responses:
        "204":
          description: no content returned if success
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    cookieAuth:
      type: apiKey
      in: cookie
      name: VIDEOAPI_SESSION
  schemas:
    queryError:
      type: object
      properties:
        error:
          type: string
    ResourceId:
      type: object
      properties:
        id:
          type: string
    ListOfUser:
      type: object
      properties:
        next:
          type: string
          example: sort=asc&offset=10&limit=10
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        id:
          type: string
          readOnly: false
        created_at:
          type: string
          format: date-time
          readOnly: true
        modified_at:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          readOnly: false
        role:
          type: string
          readOnly: false
        password:
          type: string
          readOnly: false
      required:
        - id
    ListOfVideo:
      type: object
      properties:
        next:
          type: string
          example: sort=asc&offset=10&limit=10
        data:
          type: array
          items:
            $ref: '#/components/schemas/Video'
    Video:
      type: object
      properties:
        id:
          type: string
          readOnly: false
        created_at:
          type: string
          format: date-time
          readOnly: true
        modified_at:
          type: string
          format: date-time
          readOnly: true
        timestamp:
          type: string
          format: date-time
          readOnly: false
        camera:
          type: string
          readOnly: false
        tags:
          type: array
          items:
            type: string
          readOnly: false
        mediaURL:
          type: string
          readOnly: true
      required:
        - id
        - timestamp
        - camera
    ListOfPicture:
      type: object
      properties:
        next:
          type: string
          example: sort=asc&offset=10&limit=10
        data:
          type: array
          items:
            $ref: '#/components/schemas/Picture'
    Picture:
      type: object
      properties:
        id:
          type: string
          readOnly: false
        created_at:
          type: string
          format: date-time
          readOnly: true
        modified_at:
          type: string
          format: date-time
          readOnly: true
        timestamp:
          type: string
          format: date-time
          readOnly: false
        camera:
          type: string
          readOnly: false
        tags:
          type: array
          items:
            type: string
          readOnly: false
        mediaURL:
          type: string
          readOnly: true
      required:
        - id
        - timestamp
        - camera
