openapi: 3.0.0
info:
  title: VideoAPI
  description: API para la comunicaci√≥n con el backend de video
  version: 0.1.0
servers:
  - url: /
    description: current host
components:
  schemas:
    queryError:
      type: object
      properties:
        error:
          type: string
    ResourceId:
      type: object
      properties:
        id:
          type: string
    alertmanager_webhook:
      type: object
      properties:
        version:
          type: string
        groupKey:
          type: string
        status:
          type: string
        receiver:
          type: string
        groupLabels:
          type: object
        commonLabels:
          type: object
        commonAnnotations:
          type: object
        externalURL:
          type: string
        alerts:
          type: array
          items:
            type: object
            properties:
              status:
                type: string
              labels:
                type: object
              annotations:
                type: object
              startsAt:
                type: string
                format: date-time
              endsAt:
                type: string
                format: date-time
              generatorURL:
                type: string
    ListOfUser:
      type: object
      properties:
        next:
          type: string
          example: sort=asc&offset=10&limit=10
        prev:
          type: string
          example: sort=asc&offset=0&limit=10
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        id:
          type: string
          readOnly: false
        created_at:
          type: string
          format: date-time
          readOnly: true
        modified_at:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          readOnly: false
        role:
          type: string
          enum:
            - ADMIN
            - READ_ONLY
            - READ_WRITE
            - SERVICE
          readOnly: false
        password:
          type: string
          readOnly: false
      required:
        - id
        - name
        - role
        - password
    put_User:
      type: object
      properties:
        name:
          type: string
          readOnly: false
        role:
          type: string
          enum:
            - ADMIN
            - READ_ONLY
            - READ_WRITE
            - SERVICE
          readOnly: false
        password:
          type: string
          readOnly: false
      required: false
    ListOfCamera:
      type: object
      properties:
        next:
          type: string
          example: sort=asc&offset=10&limit=10
        prev:
          type: string
          example: sort=asc&offset=0&limit=10
        data:
          type: array
          items:
            $ref: '#/components/schemas/Camera'
    Camera:
      type: object
      properties:
        id:
          type: string
          readOnly: false
        created_at:
          type: string
          format: date-time
          readOnly: true
        modified_at:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          readOnly: false
        latitude:
          type: number
          readOnly: false
        longitude:
          type: number
          readOnly: false
        local_path:
          type: string
          readOnly: false
      required:
        - id
        - name
        - latitude
        - longitude
    put_Camera:
      type: object
      properties:
        name:
          type: string
          readOnly: false
        latitude:
          type: number
          readOnly: false
        longitude:
          type: number
          readOnly: false
        local_path:
          type: string
          readOnly: false
      required: false
    ListOfVideo:
      type: object
      properties:
        next:
          type: string
          example: sort=asc&offset=10&limit=10
        prev:
          type: string
          example: sort=asc&offset=0&limit=10
        data:
          type: array
          items:
            $ref: '#/components/schemas/Video'
    Video:
      type: object
      properties:
        id:
          type: string
          readOnly: false
        created_at:
          type: string
          format: date-time
          readOnly: true
        modified_at:
          type: string
          format: date-time
          readOnly: true
        timestamp:
          type: string
          format: date-time
          readOnly: false
        camera:
          type: string
          readOnly: false
        tags:
          type: array
          items:
            type: string
          readOnly: false
        media_url:
          type: string
          readOnly: true
      required:
        - id
        - timestamp
        - camera
    put_Video:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          readOnly: false
        camera:
          type: string
          readOnly: false
        tags:
          type: array
          items:
            type: string
          readOnly: false
      required: false
    ListOfPicture:
      type: object
      properties:
        next:
          type: string
          example: sort=asc&offset=10&limit=10
        prev:
          type: string
          example: sort=asc&offset=0&limit=10
        data:
          type: array
          items:
            $ref: '#/components/schemas/Picture'
    Picture:
      type: object
      properties:
        id:
          type: string
          readOnly: false
        created_at:
          type: string
          format: date-time
          readOnly: true
        modified_at:
          type: string
          format: date-time
          readOnly: true
        timestamp:
          type: string
          format: date-time
          readOnly: false
        camera:
          type: string
          readOnly: false
        tags:
          type: array
          items:
            type: string
          readOnly: false
        media_url:
          type: string
          readOnly: true
      required:
        - id
        - timestamp
        - camera
    put_Picture:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          readOnly: false
        camera:
          type: string
          readOnly: false
        tags:
          type: array
          items:
            type: string
          readOnly: false
      required: false
    ListOfAlert:
      type: object
      properties:
        next:
          type: string
          example: sort=asc&offset=10&limit=10
        prev:
          type: string
          example: sort=asc&offset=0&limit=10
        data:
          type: array
          items:
            $ref: '#/components/schemas/Alert'
    Alert:
      type: object
      properties:
        id:
          type: string
          readOnly: false
        created_at:
          type: string
          format: date-time
          readOnly: true
        modified_at:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          readOnly: false
        timestamp:
          type: string
          format: date-time
          readOnly: false
        camera:
          type: string
          readOnly: false
        severity:
          type: string
          readOnly: false
        message:
          type: string
          readOnly: false
        acknowledged_at:
          type: string
          format: date-time
          readOnly: false
        resolved_at:
          type: string
          format: date-time
          readOnly: false
      required:
        - id
        - timestamp
        - camera
        - severity
        - message
    put_Alert:
      type: object
      properties:
        name:
          type: string
          readOnly: false
        timestamp:
          type: string
          format: date-time
          readOnly: false
        camera:
          type: string
          readOnly: false
        severity:
          type: string
          readOnly: false
        message:
          type: string
          readOnly: false
        acknowledged_at:
          type: string
          format: date-time
          readOnly: false
        resolved_at:
          type: string
          format: date-time
          readOnly: false
      required: false
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    cookieAuth:
      type: apiKey
      in: cookie
      name: VIDEOAPI_SESSION
    apiKey:
      type: apiKey
      in: query
      name: apiKey
paths:
  /v1/api/login:
    post:
      summary: Logs in and returns the authentication token
      security: []
      tags:
        - Auth
      requestBody:
        required: true
        description: Credentials
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Authentication token
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  role:
                    type: string
                  token:
                    type: string
          headers:
            Set-Cookie:
              description: Authentication cookie
              schema:
                type: string
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    get:
      summary: Refresh the authentication token
      tags:
        - Auth
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "200":
          description: Authentication token
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  role:
                    type: string
                  token:
                    type: string
          headers:
            Set-Cookie:
              description: Authentication cookie
              schema:
                type: string
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "401":
          description: Unauthorized
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
  /v1/api/logout:
    get:
      summary: Removes session cookie
      tags:
        - Auth
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "204":
          description: No data
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
  /v1/api/me:
    get:
      summary: Returns information about the logged-in user
      tags:
        - Auth
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "200":
          description: Authentication token
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  role:
                    type: string
                    enum:
                      - ADMIN
                      - READ_ONLY
                      - READ_WRITE
                      - SERVICE
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
  /v1/api/hook:
    post:
      summary: webhook receiver for alertmanager
      security:
        - apiKey: []
      tags:
        - AlertManager
      requestBody:
        required: true
        description: alert body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alertmanager_webhook'
      responses:
        "200":
          description: Webhook processed successfully
        "400":
          description: Invalid request
          content:
            text/plain:
              schema:
                type: string
        "500":
          description: Internal error
          content:
            text/plain:
              schema:
                type: string
  /v1/api/user:
    get:
      summary: Queries a list of User
      tags:
        - User
      description: |-
        All query (q) parameters support several **operators**:

        - `eq`: equals
        - `ne`: not equals
        - `lt`: less than
        - `le`: less or equal
        - `gt`: greater than
        - `ge`: greater or equal
        - `like`: SQL like

        Operators `eq` and `ne` support the special value `NULL` to match
        non-null values in the DB.
      security:
        - bearerAuth: []
        - cookieaAuth: []
      parameters:
        - name: sort
          in: query
          required: false
          description: List of columns to sort by
          schema:
            type: array
            items:
              type: string
        - name: ascending
          in: query
          required: false
          description: Sort ascending
          schema:
            type: boolean
        - name: offset
          in: query
          required: false
          description: Offset for pagination
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          description: Limit for pagination
          schema:
            type: integer
        - name: outerOp
          in: query
          required: false
          description: 'How to combine separate filters: AND or OR'
          schema:
            type: choice
            choices:
              - AND
              - OR
        - name: innerOp
          in: query
          required: false
          description: 'How to combine separate values for the same filter: AND or OR (default AND)'
          schema:
            type: choice
            choices:
              - AND
              - OR
        - name: q-id-eq
          in: query
          required: false
          description: Find items where field `id` is `equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-id-ne
          in: query
          required: false
          description: Find items where field `id` is `not equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-id-like
          in: query
          required: false
          description: Find items where field `id` is `like` to this value
          schema:
            type: string
        - name: q-created_at-lt
          in: query
          required: false
          description: Find items where field `created_at` is `less than` this value
          schema:
            format: date-time
            type: string
        - name: q-created_at-le
          in: query
          required: false
          description: Find items where field `created_at` is `less or equal` than this value
          schema:
            format: date-time
            type: string
        - name: q-created_at-gt
          in: query
          required: false
          description: Find items where field `created_at` is `greater than` this value
          schema:
            format: date-time
            type: string
        - name: q-created_at-ge
          in: query
          required: false
          description: Find items where field `created_at` is `greater or equal` than this value
          schema:
            format: date-time
            type: string
        - name: q-modified_at-lt
          in: query
          required: false
          description: Find items where field `modified_at` is `less than` this value
          schema:
            format: date-time
            type: string
        - name: q-modified_at-le
          in: query
          required: false
          description: Find items where field `modified_at` is `less or equal` than this value
          schema:
            format: date-time
            type: string
        - name: q-modified_at-gt
          in: query
          required: false
          description: Find items where field `modified_at` is `greater than` this value
          schema:
            format: date-time
            type: string
        - name: q-modified_at-ge
          in: query
          required: false
          description: Find items where field `modified_at` is `greater or equal` than this value
          schema:
            format: date-time
            type: string
        - name: q-name-eq
          in: query
          required: false
          description: Find items where field `name` is `equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-name-ne
          in: query
          required: false
          description: Find items where field `name` is `not equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-name-like
          in: query
          required: false
          description: Find items where field `name` is `like` to this value
          schema:
            type: string
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "200":
          description: List of items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfUser'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    post:
      summary: Creates a new User
      tags:
        - User
      requestBody:
        description: Information of the User
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "200":
          description: New resource created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceId'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
  /v1/api/user/{id}:
    get:
      summary: Queries a User by id
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "200":
          description: resource content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    put:
      summary: Updates a User by id
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Information of the User
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/put_User'
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "204":
          description: no content returned if success
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    delete:
      summary: Deletes a User by id
      tags:
        - User
      security:
        - bearerAuth: []
        - cookieaAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: no content returned if success
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
  /v1/api/camera:
    get:
      summary: Queries a list of Camera
      tags:
        - Camera
      description: |-
        All query (q) parameters support several **operators**:

        - `eq`: equals
        - `ne`: not equals
        - `lt`: less than
        - `le`: less or equal
        - `gt`: greater than
        - `ge`: greater or equal
        - `like`: SQL like

        Operators `eq` and `ne` support the special value `NULL` to match
        non-null values in the DB.
      security:
        - bearerAuth: []
        - cookieaAuth: []
      parameters:
        - name: sort
          in: query
          required: false
          description: List of columns to sort by
          schema:
            type: array
            items:
              type: string
        - name: ascending
          in: query
          required: false
          description: Sort ascending
          schema:
            type: boolean
        - name: offset
          in: query
          required: false
          description: Offset for pagination
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          description: Limit for pagination
          schema:
            type: integer
        - name: outerOp
          in: query
          required: false
          description: 'How to combine separate filters: AND or OR'
          schema:
            type: choice
            choices:
              - AND
              - OR
        - name: innerOp
          in: query
          required: false
          description: 'How to combine separate values for the same filter: AND or OR (default AND)'
          schema:
            type: choice
            choices:
              - AND
              - OR
        - name: q-id-eq
          in: query
          required: false
          description: Find items where field `id` is `equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-id-ne
          in: query
          required: false
          description: Find items where field `id` is `not equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-id-like
          in: query
          required: false
          description: Find items where field `id` is `like` to this value
          schema:
            type: string
        - name: q-created_at-lt
          in: query
          required: false
          description: Find items where field `created_at` is `less than` this value
          schema:
            format: date-time
            type: string
        - name: q-created_at-le
          in: query
          required: false
          description: Find items where field `created_at` is `less or equal` than this value
          schema:
            format: date-time
            type: string
        - name: q-created_at-gt
          in: query
          required: false
          description: Find items where field `created_at` is `greater than` this value
          schema:
            format: date-time
            type: string
        - name: q-created_at-ge
          in: query
          required: false
          description: Find items where field `created_at` is `greater or equal` than this value
          schema:
            format: date-time
            type: string
        - name: q-modified_at-lt
          in: query
          required: false
          description: Find items where field `modified_at` is `less than` this value
          schema:
            format: date-time
            type: string
        - name: q-modified_at-le
          in: query
          required: false
          description: Find items where field `modified_at` is `less or equal` than this value
          schema:
            format: date-time
            type: string
        - name: q-modified_at-gt
          in: query
          required: false
          description: Find items where field `modified_at` is `greater than` this value
          schema:
            format: date-time
            type: string
        - name: q-modified_at-ge
          in: query
          required: false
          description: Find items where field `modified_at` is `greater or equal` than this value
          schema:
            format: date-time
            type: string
        - name: q-name-eq
          in: query
          required: false
          description: Find items where field `name` is `equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-name-ne
          in: query
          required: false
          description: Find items where field `name` is `not equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-name-like
          in: query
          required: false
          description: Find items where field `name` is `like` to this value
          schema:
            type: string
        - name: q-latitude-lt
          in: query
          required: false
          description: Find items where field `latitude` is `less than` this value
          schema:
            type: number
        - name: q-latitude-le
          in: query
          required: false
          description: Find items where field `latitude` is `less or equal` than this value
          schema:
            type: number
        - name: q-latitude-gt
          in: query
          required: false
          description: Find items where field `latitude` is `greater than` this value
          schema:
            type: number
        - name: q-latitude-ge
          in: query
          required: false
          description: Find items where field `latitude` is `greater or equal` than this value
          schema:
            type: number
        - name: q-longitude-lt
          in: query
          required: false
          description: Find items where field `longitude` is `less than` this value
          schema:
            type: number
        - name: q-longitude-le
          in: query
          required: false
          description: Find items where field `longitude` is `less or equal` than this value
          schema:
            type: number
        - name: q-longitude-gt
          in: query
          required: false
          description: Find items where field `longitude` is `greater than` this value
          schema:
            type: number
        - name: q-longitude-ge
          in: query
          required: false
          description: Find items where field `longitude` is `greater or equal` than this value
          schema:
            type: number
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "200":
          description: List of items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfCamera'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    post:
      summary: Creates a new Camera
      tags:
        - Camera
      requestBody:
        description: Information of the Camera
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Camera'
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "200":
          description: New resource created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceId'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
  /v1/api/camera/{id}:
    get:
      summary: Queries a Camera by id
      tags:
        - Camera
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "200":
          description: resource content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Camera'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    put:
      summary: Updates a Camera by id
      tags:
        - Camera
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Information of the Camera
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/put_Camera'
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "204":
          description: no content returned if success
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    delete:
      summary: Deletes a Camera by id
      tags:
        - Camera
      security:
        - bearerAuth: []
        - cookieaAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: no content returned if success
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
  /v1/api/video:
    get:
      summary: Queries a list of Video
      tags:
        - Video
      description: |-
        All query (q) parameters support several **operators**:

        - `eq`: equals
        - `ne`: not equals
        - `lt`: less than
        - `le`: less or equal
        - `gt`: greater than
        - `ge`: greater or equal
        - `like`: SQL like

        Operators `eq` and `ne` support the special value `NULL` to match
        non-null values in the DB.
      security:
        - bearerAuth: []
        - cookieaAuth: []
      parameters:
        - name: sort
          in: query
          required: false
          description: List of columns to sort by
          schema:
            type: array
            items:
              type: string
        - name: ascending
          in: query
          required: false
          description: Sort ascending
          schema:
            type: boolean
        - name: offset
          in: query
          required: false
          description: Offset for pagination
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          description: Limit for pagination
          schema:
            type: integer
        - name: outerOp
          in: query
          required: false
          description: 'How to combine separate filters: AND or OR'
          schema:
            type: choice
            choices:
              - AND
              - OR
        - name: innerOp
          in: query
          required: false
          description: 'How to combine separate values for the same filter: AND or OR (default AND)'
          schema:
            type: choice
            choices:
              - AND
              - OR
        - name: q-id-eq
          in: query
          required: false
          description: Find items where field `id` is `equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-id-ne
          in: query
          required: false
          description: Find items where field `id` is `not equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-id-like
          in: query
          required: false
          description: Find items where field `id` is `like` to this value
          schema:
            type: string
        - name: q-created_at-lt
          in: query
          required: false
          description: Find items where field `created_at` is `less than` this value
          schema:
            format: date-time
            type: string
        - name: q-created_at-le
          in: query
          required: false
          description: Find items where field `created_at` is `less or equal` than this value
          schema:
            format: date-time
            type: string
        - name: q-created_at-gt
          in: query
          required: false
          description: Find items where field `created_at` is `greater than` this value
          schema:
            format: date-time
            type: string
        - name: q-created_at-ge
          in: query
          required: false
          description: Find items where field `created_at` is `greater or equal` than this value
          schema:
            format: date-time
            type: string
        - name: q-modified_at-lt
          in: query
          required: false
          description: Find items where field `modified_at` is `less than` this value
          schema:
            format: date-time
            type: string
        - name: q-modified_at-le
          in: query
          required: false
          description: Find items where field `modified_at` is `less or equal` than this value
          schema:
            format: date-time
            type: string
        - name: q-modified_at-gt
          in: query
          required: false
          description: Find items where field `modified_at` is `greater than` this value
          schema:
            format: date-time
            type: string
        - name: q-modified_at-ge
          in: query
          required: false
          description: Find items where field `modified_at` is `greater or equal` than this value
          schema:
            format: date-time
            type: string
        - name: q-timestamp-lt
          in: query
          required: false
          description: Find items where field `timestamp` is `less than` this value
          schema:
            format: date-time
            type: string
        - name: q-timestamp-le
          in: query
          required: false
          description: Find items where field `timestamp` is `less or equal` than this value
          schema:
            format: date-time
            type: string
        - name: q-timestamp-gt
          in: query
          required: false
          description: Find items where field `timestamp` is `greater than` this value
          schema:
            format: date-time
            type: string
        - name: q-timestamp-ge
          in: query
          required: false
          description: Find items where field `timestamp` is `greater or equal` than this value
          schema:
            format: date-time
            type: string
        - name: q-camera-eq
          in: query
          required: false
          description: Find items where field `camera` is `equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-camera-ne
          in: query
          required: false
          description: Find items where field `camera` is `not equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-camera-like
          in: query
          required: false
          description: Find items where field `camera` is `like` to this value
          schema:
            type: string
        - name: q-tags-eq
          in: query
          required: false
          description: Find items where field `tags` is `equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-tags-ne
          in: query
          required: false
          description: Find items where field `tags` is `not equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-tags-like
          in: query
          required: false
          description: Find items where field `tags` is `like` to this value
          schema:
            type: string
        - name: q-media_url-eq
          in: query
          required: false
          description: Find items where field `media_url` is `equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-media_url-ne
          in: query
          required: false
          description: Find items where field `media_url` is `not equal` to this value (use `NULL` to match null values)
          schema:
            type: string
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "200":
          description: List of items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfVideo'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    post:
      summary: Creates a new Video
      tags:
        - Video
      requestBody:
        description: Information of the Video
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Video'
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "200":
          description: New resource created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceId'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
  /v1/api/video/{id}:
    get:
      summary: Queries a Video by id
      tags:
        - Video
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "200":
          description: resource content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    put:
      summary: Updates a Video by id
      tags:
        - Video
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Information of the Video
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/put_Video'
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "204":
          description: no content returned if success
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    post:
      summary: Uploads the file for the Video by id
      tags:
        - Video
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: redirectOnSuccess
          in: query
          required: false
          schema:
            type: string
          description: If provided, redirect URL on success
        - name: redirectOnError
          in: query
          required: false
          schema:
            type: string
          description: If provided, redirect URL on error. "error" will be appended to queryString
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
            encoding:
              file:
                contentType: video/4gpp, video/3gpp2, video/3gp2, video/mpeg, video/mp4, video/ogg, video/quicktime, video/webm
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "200":
          description: Media URL for the file uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  media_url:
                    type: string
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "301":
          description: Redirect to the provided URLs on success or error
          headers:
            Location:
              description: URL to redirect to
              schema:
                type: string
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    delete:
      summary: Deletes a Video by id
      tags:
        - Video
      security:
        - bearerAuth: []
        - cookieaAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: mediaOnly
          in: query
          required: false
          schema:
            type: boolean
          description: If true, only the media will be deleted
      responses:
        "204":
          description: no content returned if success
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
  /v1/api/picture:
    get:
      summary: Queries a list of Picture
      tags:
        - Picture
      description: |-
        All query (q) parameters support several **operators**:

        - `eq`: equals
        - `ne`: not equals
        - `lt`: less than
        - `le`: less or equal
        - `gt`: greater than
        - `ge`: greater or equal
        - `like`: SQL like

        Operators `eq` and `ne` support the special value `NULL` to match
        non-null values in the DB.
      security:
        - bearerAuth: []
        - cookieaAuth: []
      parameters:
        - name: sort
          in: query
          required: false
          description: List of columns to sort by
          schema:
            type: array
            items:
              type: string
        - name: ascending
          in: query
          required: false
          description: Sort ascending
          schema:
            type: boolean
        - name: offset
          in: query
          required: false
          description: Offset for pagination
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          description: Limit for pagination
          schema:
            type: integer
        - name: outerOp
          in: query
          required: false
          description: 'How to combine separate filters: AND or OR'
          schema:
            type: choice
            choices:
              - AND
              - OR
        - name: innerOp
          in: query
          required: false
          description: 'How to combine separate values for the same filter: AND or OR (default AND)'
          schema:
            type: choice
            choices:
              - AND
              - OR
        - name: q-id-eq
          in: query
          required: false
          description: Find items where field `id` is `equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-id-ne
          in: query
          required: false
          description: Find items where field `id` is `not equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-id-like
          in: query
          required: false
          description: Find items where field `id` is `like` to this value
          schema:
            type: string
        - name: q-created_at-lt
          in: query
          required: false
          description: Find items where field `created_at` is `less than` this value
          schema:
            type: string
            format: date-time
        - name: q-created_at-le
          in: query
          required: false
          description: Find items where field `created_at` is `less or equal` than this value
          schema:
            type: string
            format: date-time
        - name: q-created_at-gt
          in: query
          required: false
          description: Find items where field `created_at` is `greater than` this value
          schema:
            type: string
            format: date-time
        - name: q-created_at-ge
          in: query
          required: false
          description: Find items where field `created_at` is `greater or equal` than this value
          schema:
            type: string
            format: date-time
        - name: q-modified_at-lt
          in: query
          required: false
          description: Find items where field `modified_at` is `less than` this value
          schema:
            type: string
            format: date-time
        - name: q-modified_at-le
          in: query
          required: false
          description: Find items where field `modified_at` is `less or equal` than this value
          schema:
            type: string
            format: date-time
        - name: q-modified_at-gt
          in: query
          required: false
          description: Find items where field `modified_at` is `greater than` this value
          schema:
            type: string
            format: date-time
        - name: q-modified_at-ge
          in: query
          required: false
          description: Find items where field `modified_at` is `greater or equal` than this value
          schema:
            type: string
            format: date-time
        - name: q-timestamp-lt
          in: query
          required: false
          description: Find items where field `timestamp` is `less than` this value
          schema:
            type: string
            format: date-time
        - name: q-timestamp-le
          in: query
          required: false
          description: Find items where field `timestamp` is `less or equal` than this value
          schema:
            type: string
            format: date-time
        - name: q-timestamp-gt
          in: query
          required: false
          description: Find items where field `timestamp` is `greater than` this value
          schema:
            type: string
            format: date-time
        - name: q-timestamp-ge
          in: query
          required: false
          description: Find items where field `timestamp` is `greater or equal` than this value
          schema:
            type: string
            format: date-time
        - name: q-camera-eq
          in: query
          required: false
          description: Find items where field `camera` is `equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-camera-ne
          in: query
          required: false
          description: Find items where field `camera` is `not equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-camera-like
          in: query
          required: false
          description: Find items where field `camera` is `like` to this value
          schema:
            type: string
        - name: q-tags-eq
          in: query
          required: false
          description: Find items where field `tags` is `equal` to this value (use `NULL` to match null values)
          schema:
            type: array
            items:
              type: string
        - name: q-tags-ne
          in: query
          required: false
          description: Find items where field `tags` is `not equal` to this value (use `NULL` to match null values)
          schema:
            type: array
            items:
              type: string
        - name: q-tags-like
          in: query
          required: false
          description: Find items where field `tags` is `like` to this value
          schema:
            type: array
            items:
              type: string
        - name: q-media_url-eq
          in: query
          required: false
          description: Find items where field `media_url` is `equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-media_url-ne
          in: query
          required: false
          description: Find items where field `media_url` is `not equal` to this value (use `NULL` to match null values)
          schema:
            type: string
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "200":
          description: List of items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfPicture'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    post:
      summary: Creates a new Picture
      tags:
        - Picture
      requestBody:
        description: Information of the Picture
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Picture'
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "200":
          description: New resource created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceId'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
  /v1/api/picture/{id}:
    get:
      summary: Queries a Picture by id
      tags:
        - Picture
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "200":
          description: resource content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Picture'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    put:
      summary: Updates a Picture by id
      tags:
        - Picture
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Information of the Picture
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/put_Picture'
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "204":
          description: no content returned if success
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    post:
      summary: Uploads the file for the Picture by id
      tags:
        - Picture
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: redirectOnSuccess
          in: query
          required: false
          schema:
            type: string
          description: If provided, redirect URL on success
        - name: redirectOnError
          in: query
          required: false
          schema:
            type: string
          description: If provided, redirect URL on error. "error" will be appended to queryString
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
            encoding:
              file:
                contentType: image/jpeg, image/png
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "200":
          description: Media URL for the file uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  media_url:
                    type: string
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "301":
          description: Redirect to the provided URLs on success or error
          headers:
            Location:
              description: URL to redirect to
              schema:
                type: string
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    delete:
      summary: Deletes a Picture by id
      tags:
        - Picture
      security:
        - bearerAuth: []
        - cookieaAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: mediaOnly
          in: query
          required: false
          schema:
            type: boolean
          description: If true, only the media will be deleted
      responses:
        "204":
          description: no content returned if success
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
  /v1/api/alert:
    get:
      summary: Queries a list of Alert
      tags:
        - Alert
      description: |-
        All query (q) parameters support several **operators**:

        - `eq`: equals
        - `ne`: not equals
        - `lt`: less than
        - `le`: less or equal
        - `gt`: greater than
        - `ge`: greater or equal
        - `like`: SQL like

        Operators `eq` and `ne` support the special value `NULL` to match
        non-null values in the DB.
      security:
        - bearerAuth: []
        - cookieaAuth: []
      parameters:
        - name: sort
          in: query
          required: false
          description: List of columns to sort by
          schema:
            type: array
            items:
              type: string
        - name: ascending
          in: query
          required: false
          description: Sort ascending
          schema:
            type: boolean
        - name: offset
          in: query
          required: false
          description: Offset for pagination
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          description: Limit for pagination
          schema:
            type: integer
        - name: outerOp
          in: query
          required: false
          description: 'How to combine separate filters: AND or OR'
          schema:
            type: choice
            choices:
              - AND
              - OR
        - name: innerOp
          in: query
          required: false
          description: 'How to combine separate values for the same filter: AND or OR (default AND)'
          schema:
            type: choice
            choices:
              - AND
              - OR
        - name: q-id-eq
          in: query
          required: false
          description: Find items where field `id` is `equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-id-ne
          in: query
          required: false
          description: Find items where field `id` is `not equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-id-like
          in: query
          required: false
          description: Find items where field `id` is `like` to this value
          schema:
            type: string
        - name: q-created_at-lt
          in: query
          required: false
          description: Find items where field `created_at` is `less than` this value
          schema:
            type: string
            format: date-time
        - name: q-created_at-le
          in: query
          required: false
          description: Find items where field `created_at` is `less or equal` than this value
          schema:
            type: string
            format: date-time
        - name: q-created_at-gt
          in: query
          required: false
          description: Find items where field `created_at` is `greater than` this value
          schema:
            type: string
            format: date-time
        - name: q-created_at-ge
          in: query
          required: false
          description: Find items where field `created_at` is `greater or equal` than this value
          schema:
            type: string
            format: date-time
        - name: q-modified_at-lt
          in: query
          required: false
          description: Find items where field `modified_at` is `less than` this value
          schema:
            type: string
            format: date-time
        - name: q-modified_at-le
          in: query
          required: false
          description: Find items where field `modified_at` is `less or equal` than this value
          schema:
            type: string
            format: date-time
        - name: q-modified_at-gt
          in: query
          required: false
          description: Find items where field `modified_at` is `greater than` this value
          schema:
            type: string
            format: date-time
        - name: q-modified_at-ge
          in: query
          required: false
          description: Find items where field `modified_at` is `greater or equal` than this value
          schema:
            type: string
            format: date-time
        - name: q-name-eq
          in: query
          required: false
          description: Find items where field `name` is `equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-name-ne
          in: query
          required: false
          description: Find items where field `name` is `not equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-name-like
          in: query
          required: false
          description: Find items where field `name` is `like` to this value
          schema:
            type: string
        - name: q-timestamp-lt
          in: query
          required: false
          description: Find items where field `timestamp` is `less than` this value
          schema:
            type: string
            format: date-time
        - name: q-timestamp-le
          in: query
          required: false
          description: Find items where field `timestamp` is `less or equal` than this value
          schema:
            type: string
            format: date-time
        - name: q-timestamp-gt
          in: query
          required: false
          description: Find items where field `timestamp` is `greater than` this value
          schema:
            type: string
            format: date-time
        - name: q-timestamp-ge
          in: query
          required: false
          description: Find items where field `timestamp` is `greater or equal` than this value
          schema:
            type: string
            format: date-time
        - name: q-camera-eq
          in: query
          required: false
          description: Find items where field `camera` is `equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-camera-ne
          in: query
          required: false
          description: Find items where field `camera` is `not equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-camera-like
          in: query
          required: false
          description: Find items where field `camera` is `like` to this value
          schema:
            type: string
        - name: q-severity-eq
          in: query
          required: false
          description: Find items where field `severity` is `equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-severity-ne
          in: query
          required: false
          description: Find items where field `severity` is `not equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-severity-like
          in: query
          required: false
          description: Find items where field `severity` is `like` to this value
          schema:
            type: string
        - name: q-message-eq
          in: query
          required: false
          description: Find items where field `message` is `equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-message-ne
          in: query
          required: false
          description: Find items where field `message` is `not equal` to this value (use `NULL` to match null values)
          schema:
            type: string
        - name: q-message-like
          in: query
          required: false
          description: Find items where field `message` is `like` to this value
          schema:
            type: string
        - name: q-acknowledged_at-lt
          in: query
          required: false
          description: Find items where field `acknowledged_at` is `less than` this value
          schema:
            type: string
            format: date-time
        - name: q-acknowledged_at-le
          in: query
          required: false
          description: Find items where field `acknowledged_at` is `less or equal` than this value
          schema:
            type: string
            format: date-time
        - name: q-acknowledged_at-gt
          in: query
          required: false
          description: Find items where field `acknowledged_at` is `greater than` this value
          schema:
            type: string
            format: date-time
        - name: q-acknowledged_at-ge
          in: query
          required: false
          description: Find items where field `acknowledged_at` is `greater or equal` than this value
          schema:
            type: string
            format: date-time
        - name: q-acknowledged_at-eq
          in: query
          required: false
          description: Find items where field `acknowledged_at` is `equal` to this value (use `NULL` to match null values)
          schema:
            type: string
            format: date-time
        - name: q-acknowledged_at-ne
          in: query
          required: false
          description: Find items where field `acknowledged_at` is `not equal` to this value (use `NULL` to match null values)
          schema:
            type: string
            format: date-time
        - name: q-resolved_at-lt
          in: query
          required: false
          description: Find items where field `resolved_at` is `less than` this value
          schema:
            type: string
            format: date-time
        - name: q-resolved_at-le
          in: query
          required: false
          description: Find items where field `resolved_at` is `less or equal` than this value
          schema:
            type: string
            format: date-time
        - name: q-resolved_at-gt
          in: query
          required: false
          description: Find items where field `resolved_at` is `greater than` this value
          schema:
            type: string
            format: date-time
        - name: q-resolved_at-ge
          in: query
          required: false
          description: Find items where field `resolved_at` is `greater or equal` than this value
          schema:
            type: string
            format: date-time
        - name: q-resolved_at-eq
          in: query
          required: false
          description: Find items where field `resolved_at` is `equal` to this value (use `NULL` to match null values)
          schema:
            type: string
            format: date-time
        - name: q-resolved_at-ne
          in: query
          required: false
          description: Find items where field `resolved_at` is `not equal` to this value (use `NULL` to match null values)
          schema:
            type: string
            format: date-time
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "200":
          description: List of items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfAlert'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    post:
      summary: Creates a new Alert
      tags:
        - Alert
      requestBody:
        description: Information of the Alert
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Alert'
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "200":
          description: New resource created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceId'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
  /v1/api/alert/{id}:
    get:
      summary: Queries a Alert by id
      tags:
        - Alert
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "200":
          description: resource content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    put:
      summary: Updates a Alert by id
      tags:
        - Alert
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Information of the Alert
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/put_Alert'
      security:
        - bearerAuth: []
        - cookieaAuth: []
      responses:
        "204":
          description: no content returned if success
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
    delete:
      summary: Deletes a Alert by id
      tags:
        - Alert
      security:
        - bearerAuth: []
        - cookieaAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: no content returned if success
        "401":
          description: Unauthorized
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queryError'
